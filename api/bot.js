// api/bot.js
import { Telegraf } from "telegraf";

// ----------- CONFIG -------------------------------------------------
const BOT_TOKEN   = process.env.BOT_TOKEN;      // <-- set in Vercel env vars
const ADMIN_ID    = Number(process.env.ADMIN_ID); // <-- telegram numeric user_id of the admin
if (!BOT_TOKEN) throw new Error("BOT_TOKEN env var is required");

// -------------------------------------------------------------------
const bot = new Telegraf(BOT_TOKEN);

// -------------------------------------------------------------------
// 2 JSON‚Äëtables (you can also read them from a file or a DB if you prefer)
const schedule = [
  {
    time: "08:00-08:40",
    Monday:    "–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º",
    Tuesday:   "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    Wednesday: "–§–∏–∑-—Ä–∞",
    Thursday:  "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Friday:    "–û–∫—Ä—É–∂. –º–∏—Ä",
    Saturday:  "–û–∫—Ä—É–∂. –º–∏—Ä"
  },
  {
    time: "08:50-09:30",
    Monday:    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    Tuesday:   "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Wednesday: "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    Thursday:  "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    Friday:    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    Saturday:  "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
  },
  {
    time: "09:45-10:25",
    Monday:    "–ú—É–∑—ã–∫–∞",
    Tuesday:   "–†–∏—Ç–º–∏–∫–∞",
    Wednesday: "–û–∫—Ä—É–∂. –º–∏—Ä",
    Thursday:  "–†–∏—Ç–º–∏–∫–∞",
    Friday:    "–§–∏–∑-—Ä–∞",
    Saturday:  "–§–∏–∑-—Ä–∞"
  },
  {
    time: "10:45-11:25",
    Monday:    "–†–∏—Ç–º–∏–∫–∞",
    Tuesday:   "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    Wednesday: "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Thursday:  "–¢—Ä—É–¥",
    Friday:    null,
    Saturday:  null
  },
  {
    time: "11:45-12:25",
    Monday:    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Tuesday:   null,
    Wednesday: null,
    Thursday:  null,
    Friday:    null,
    Saturday:  null
  }
];

const dayInfo = [
  { day: "–ü–Ω", endOfLessons: "11:40", pickup: "–ë–∞–±—É—à–∫–∞", karate: false },
  { day: "–í—Ç", endOfLessons: "11:40", pickup: "–ë–∞–±—É—à–∫–∞", karate: "16:30" },
  { day: "–°—Ä", endOfLessons: "11:40", pickup: "–ü—Ä–æ–¥–ª–µ–Ω–∫–∞", karate: false },
  { day: "–ß—Ç", endOfLessons: "11:40", pickup: "–ë–∞–±—É—à–∫–∞", karate: "16:30" },
  { day: "–ü—Ç", endOfLessons: "11:40", pickup: "–ü—Ä–æ–¥–ª–µ–Ω–∫–∞", karate: false }
];

// -------------------------------------------------------------------
// Helper maps
const EN_RU_DAYS = {
  Monday: "–ü–Ω",
  Tuesday: "–í—Ç",
  Wednesday: "–°—Ä",
  Thursday: "–ß—Ç",
  Friday: "–ü—Ç",
  Saturday: "–°–±"
};

const RU_EN_DAYS = {
  –ü–Ω: "Monday",
  –í—Ç: "Tuesday",
  –°—Ä: "Wednesday",
  –ß—Ç: "Thursday",
  –ü—Ç: "Friday",
  –°–±: "Saturday"
};

// In‚Äëmemory list of known users (persisted only while function "warms up").
//   In production you would use a real DB (e.g. Upstash Redis, Supabase, ‚Ä¶)
//   For a simple demo this is enough.
let knownUsers = new Set();

// -------------------------------------------------------------------
// 1Ô∏è‚É£  /start ‚Äì greet & remember the user
bot.start((ctx) => {
  knownUsers.add(ctx.from.id);
  ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!\n` +
    `–Ø ‚Äî –±–æ—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —à–∫–æ–ª—ã.\n\n` +
    `üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
    `/schedule ‚Äì —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é\n` +
    `/schedule <–¥–µ–Ω—å> ‚Äì —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å (–ü–Ω‚Äë–ü—Ç)\n` +
    `/pickup ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫—Ç–æ –∑–∞–±–∏—Ä–∞–µ—Ç —Ä–µ–±—ë–Ω–∫–∞ –∏ –µ—Å—Ç—å –ª–∏ –∫–∞—Ä–∞—Ç–µ\n` +
    `/pickup <–¥–µ–Ω—å> ‚Äì —Ç–∞ –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è\n` +
    (ctx.from.id === ADMIN_ID
      ? `\nüõéÔ∏è /notify ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äú–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ‚Äù`
      : "")
  );
});

// -------------------------------------------------------------------
// Helper: format schedule for a **single** day (RU day abbreviation)
function formatDaySchedule(ruDay) {
  const enDay = RU_EN_DAYS[ruDay];
  if (!enDay) return `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å ¬´${ruDay}¬ª.`;
  const rows = schedule
    .filter((row) => row[enDay]) // skip rows where the cell is null/undefined
    .map((row) => `${row.time} ‚Äî ${row[enDay]}`);
  return rows.length
    ? `üìÖ *${ruDay}*:\n` + rows.join("\n")
    : `üìÖ *${ruDay}* ‚Äî –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.`;
}

// Helper: format whole‚Äëweek schedule
function formatWeekSchedule() {
  const daysOrder = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç"];
  const parts = daysOrder.map((d) => formatDaySchedule(d));
  return parts.join("\n\n");
}

// -------------------------------------------------------------------
// 2Ô∏è‚É£  /schedule ‚Äì whole week or one day
bot.command("schedule", (ctx) => {
  const args = ctx.message.text.split(/\s+/).slice(1); // after /schedule
  if (args.length === 0) {
    ctx.replyWithMarkdownV2(formatWeekSchedule());
    return;
  }
  const day = args[0].charAt(0).toUpperCase() + args[0].slice(1).toLowerCase(); // normalise
  const ruDay = Object.keys(RU_EN_DAYS).find(
    (d) => d.toLowerCase() === day.toLowerCase()
  );
  if (!ruDay) {
    ctx.reply(`‚ùì –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å: ${day}. –ü–∏—à–∏ –ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç`);
    return;
  }
  ctx.replyWithMarkdownV2(formatDaySchedule(ruDay));
});

// -------------------------------------------------------------------
// 3Ô∏è‚É£  /pickup ‚Äì info about who picks the child + karate
function formatPickupInfo(ruDay) {
  const info = dayInfo.find((i) => i.day === ruDay);
  if (!info) return `‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–Ω—è ${ruDay}.`;

  const karate = info.karate === false ? "‚ùå –Ω–µ—Ç" : `üïí ${info.karate}`;
  return (
    `üìå *${ruDay}*:\n` +
    `‚è∞ –ö–æ–Ω–µ—Ü —É—Ä–æ–∫–æ–≤: ${info.endOfLessons}\n` +
    `üë§ –ö—Ç–æ –∑–∞–±–µ—Ä—ë—Ç: ${info.pickup}\n` +
    `ü•ã –ö–∞—Ä–∞—Ç–µ: ${karate}`
  );
}

bot.command("pickup", (ctx) => {
  const args = ctx.message.text.split(/\s+/).slice(1);
  if (args.length === 0) {
    // show all days (Mon‚ÄëFri)
    const all = dayInfo
      .map((i) => formatPickupInfo(i.day))
      .join("\n\n");
    ctx.replyWithMarkdownV2(all);
    return;
  }
  const day = args[0].charAt(0).toUpperCase() + args[0].slice(1).toLowerCase();
  const ruDay = Object.keys(RU_EN_DAYS).find(
    (d) => d.toLowerCase() === day.toLowerCase()
  );
  if (!ruDay) {
    ctx.reply(`‚ùì –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å: ${day}. –ü–∏—à–∏ –ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç`);
    return;
  }
  ctx.replyWithMarkdownV2(formatPickupInfo(ruDay));
});

// -------------------------------------------------------------------
// 4Ô∏è‚É£  ADMIN command ‚Äì broadcast ‚Äú–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ‚Äù
bot.command("notify", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.");
  }
  const text = "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π /schedule.";
  const promises = [...knownUsers].map((uid) => ctx.telegram.sendMessage(uid, text, { parse_mode: "MarkdownV2" }));
  try {
    await Promise.allSettled(promises);
    ctx.reply(`‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${knownUsers.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`);
  } catch (e) {
    ctx.reply("‚ö†Ô∏è –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
  }
});

// -------------------------------------------------------------------
// 5Ô∏è‚É£  Any other text ‚Äì friendly fallback + quick‚Äëreply keyboard
bot.on("text", (ctx) => {
  ctx.reply(
    "‚ùì –Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
    "/schedule, /schedule –ü–Ω, /pickup, /pickup –ü—Ç\n" +
    (ctx.from.id === ADMIN_ID ? "/notify (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)" : ""),
    {
      reply_markup: {
        keyboard: [
          [{ text: "üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é" }, { text: "üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ü–Ω" }],
          [{ text: "üì¶ –ö—Ç–æ –∑–∞–±–∏—Ä–∞–µ—Ç?" }, { text: "ü•ã –ö–∞—Ä–∞—Ç–µ?" }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    }
  );
});

// -------------------------------------------------------------------
// Vercel entry point ‚Äì webhook handler
export default async function handler(req, res) {
  if (req.method === "POST") {
    // Telegraf expects the raw body as a Buffer
    try {
      await bot.handleUpdate(req.body, res);
    } catch (e) {
      console.error("‚ö°Ô∏è Bot error:", e);
      res.status(500).send("internal error");
    }
  } else {
    // Simple GET for sanity check
    res.status(200).send("Telegram bot is alive üëã");
  }
}
