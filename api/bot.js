// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//  api/bot.js ‚Äì Telegram‚Äë–±–æ—Ç, Vercel Serverless Function
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import { Telegraf } from "telegraf";

/* ------------------------------------------------------------------
   –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äì —É–∂–µ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã.
   ------------------------------------------------------------------ */
const BOT_TOKEN = "7964054515:AAHIU9aDGoFQkfDaplTkbVQ9_JlilcrBzYM";
const ADMIN_ID  = 111603368;               // –≤–∞—à telegram‚Äëuser_id

if (!BOT_TOKEN) throw new Error("BOT_TOKEN is missing");

// ------------------------------------------------------------------
const bot = new Telegraf(BOT_TOKEN);

/* ------------------------------------------------------------------
   –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (schedule) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–±–∏—Ä–∞–Ω–∏–∏/–∫–∞—Ä–∞—Ç–µ.
   ------------------------------------------------------------------ */
const schedule = [
  {
    time: "08:00-08:40",
    Monday:    "–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º",
    Tuesday:   "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    Wednesday: "–§–∏–∑-—Ä–∞",
    Thursday:  "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Friday:    "–û–∫—Ä—É–∂. –º–∏—Ä",
    Saturday:  "–û–∫—Ä—É–∂. –º–∏—Ä"
  },
  {
    time: "08:50-09:30",
    Monday:    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    Tuesday:   "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Wednesday: "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    Thursday:  "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    Friday:    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    Saturday:  "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
  },
  {
    time: "09:45-10:25",
    Monday:    "–ú—É–∑—ã–∫–∞",
    Tuesday:   "–†–∏—Ç–º–∏–∫–∞",
    Wednesday: "–û–∫—Ä—É–∂. –º–∏—Ä",
    Thursday:  "–†–∏—Ç–º–∏–∫–∞",
    Friday:    "–§–∏–∑-—Ä–∞",
    Saturday:  "–§–∏–∑-—Ä–∞"
  },
  {
    time: "10:45-11:25",
    Monday:    "–†–∏—Ç–º–∏–∫–∞",
    Tuesday:   "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    Wednesday: "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Thursday:  "–¢—Ä—É–¥",
    Friday:    null,
    Saturday:  null
  },
  {
    time: "11:45-12:25",
    Monday:    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Tuesday:   null,
    Wednesday: null,
    Thursday:  null,
    Friday:    null,
    Saturday:  null
  }
];

const dayInfo = [
  { day: "–ü–Ω", endOfLessons: "11:40", pickup: "–ë–∞–±—É—à–∫–∞", karate: false },
  { day: "–í—Ç", endOfLessons: "11:40", pickup: "–ë–∞–±—É—à–∫–∞", karate: "16:30" },
  { day: "–°—Ä", endOfLessons: "11:40", pickup: "–ü—Ä–æ–¥–ª–µ–Ω–∫–∞", karate: false },
  { day: "–ß—Ç", endOfLessons: "11:40", pickup: "–ë–∞–±—É—à–∫–∞", karate: "16:30" },
  { day: "–ü—Ç", endOfLessons: "11:40", pickup: "–ü—Ä–æ–¥–ª–µ–Ω–∫–∞", karate: false }
];

/* ------------------------------------------------------------------
   –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π
   ------------------------------------------------------------------ */
const EN_RU_DAYS = {
  Monday:    "–ü–Ω",
  Tuesday:   "–í—Ç",
  Wednesday: "–°—Ä",
  Thursday:  "–ß—Ç",
  Friday:    "–ü—Ç",
  Saturday:  "–°–±"
};

const RU_EN_DAYS = {
  –ü–Ω: "Monday",
  –í—Ç: "Tuesday",
  –°—Ä: "Wednesday",
  –ß—Ç: "Thursday",
  –ü—Ç: "Friday",
  –°–±: "Saturday"
};

/* ------------------------------------------------------------------
   –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)
   ------------------------------------------------------------------ */
let knownUsers = new Set();

/* ------------------------------------------------------------------
   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (MarkdownV2)
   ------------------------------------------------------------------ */
function formatDaySchedule(ruDay) {
  const enDay = RU_EN_DAYS[ruDay];
  if (!enDay) return `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å ¬´${ruDay}¬ª.`;

  const rows = schedule
    .filter(r => r[enDay])
    .map(r => `${r.time} ‚Äî ${r[enDay]}`);

  return rows.length
    ? `üìÖ *${ruDay}*:\n` + rows.join("\n")
    : `üìÖ *${ruDay}* ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.`;
}

function formatWeekSchedule() {
  const days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç"];
  return days.map(formatDaySchedule).join("\n\n");
}

function formatPickupInfo(ruDay) {
  const info = dayInfo.find(i => i.day === ruDay);
  if (!info) return `‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–Ω—è ${ruDay}.`;

  const karate = info.karate === false ? "‚ùå –Ω–µ—Ç" : `üïí ${info.karate}`;
  return (
    `üìå *${ruDay}*:\n` +
    `‚è∞ –ö–æ–Ω–µ—Ü —É—Ä–æ–∫–æ–≤: ${info.endOfLessons}\n` +
    `üë§ –ö—Ç–æ –∑–∞–±–µ—Ä—ë—Ç: ${info.pickup}\n` +
    `ü•ã –ö–∞—Ä–∞—Ç–µ: ${karate}`
  );
}

function formatWeekPickup() {
  return dayInfo.map(i => formatPickupInfo(i.day)).join("\n\n");
}

/* ------------------------------------------------------------------
   –ò–Ω–ª–∞–π–Ω‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   ------------------------------------------------------------------ */
function mainMenuKeyboard(isAdmin) {
  const btns = [
    [{ text: "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data: "schedule_week" }],
    [{ text: "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å",   callback_data: "schedule_day" }],
    [{ text: "üóìÔ∏è –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é",    callback_data: "pickup_week" }],
    [{ text: "üóìÔ∏è –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –¥–µ–Ω—å",      callback_data: "pickup_day" }]
  ];
  if (isAdmin) {
    btns.push([{ text: "üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", callback_data: "admin_notify" }]);
  }
  return { inline_keyboard: btns };
}

/* –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π ‚Äì prefix = "schedule" –∏–ª–∏ "pickup" */
function daysKeyboard(prefix) {
  const dayBtns = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç"].map(d => ({
    text: d,
    callback_data: `${prefix}_${d}`
  }));
  return {
    inline_keyboard: [
      dayBtns.slice(0, 3),
      dayBtns.slice(3, 5).concat([{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }])
    ]
  };
}

/* ------------------------------------------------------------------
   –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ ‚Äì –∫–∞–∂–¥—ã–π callback_query –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
   ------------------------------------------------------------------ */
bot.on("callback_query", ctx => {
  console.log("üî• Callback received:", ctx.callbackQuery?.data);
});

/* ------------------------------------------------------------------
   –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   ------------------------------------------------------------------ */
bot.start(ctx => {
  knownUsers.add(ctx.from.id);
  ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!\n` +
    `–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.`,
    { reply_markup: mainMenuKeyboard(ctx.from.id === ADMIN_ID) }
  );
});

/* ---------------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ------------------------------- */
bot.action("schedule_week", async ctx => {
  await ctx.answerCbQuery(); // ‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
  await ctx.replyWithMarkdownV2(formatWeekSchedule(), {
    reply_markup: { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }]] }
  });
});

bot.action("schedule_day", async ctx => {
  await ctx.answerCbQuery();
  await ctx.reply("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", { reply_markup: daysKeyboard("schedule") });
});

bot.action("pickup_week", async ctx => {
  await ctx.answerCbQuery();
  await ctx.replyWithMarkdownV2(formatWeekPickup(), {
    reply_markup: { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }]] }
  });
});

bot.action("pickup_day", async ctx => {
  await ctx.answerCbQuery();
  await ctx.reply("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", { reply_markup: daysKeyboard("pickup") });
});

/* ---------------------- –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–Ω—è ---------------------- */
bot.action(/^schedule_(\p{L}{2})$/u, async ctx => {
  const ruDay = ctx.match[1];
  await ctx.answerCbQuery();
  await ctx.replyWithMarkdownV2(formatDaySchedule(ruDay), {
    reply_markup: { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }]] }
  });
});

bot.action(/^pickup_(\p{L}{2})$/u, async ctx => {
  const ruDay = ctx.match[1];
  await ctx.answerCbQuery();
  await ctx.replyWithMarkdownV2(formatPickupInfo(ruDay), {
    reply_markup: { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }]] }
  });
});

/* ---------------------- –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ------------------- */
bot.action("back_main", async ctx => {
  await ctx.answerCbQuery();
  await ctx.editMessageText(
    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
    { reply_markup: mainMenuKeyboard(ctx.from.id === ADMIN_ID) }
  );
});

/* ---------------------- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ---------------------- */
bot.action("admin_notify", async ctx => {
  if (ctx.from.id !== ADMIN_ID) {
    await ctx.answerCbQuery("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", { show_alert: true });
    return;
  }

  await ctx.answerCbQuery(); // ‚úÖ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω

  const text = "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ.";
  const promises = [...knownUsers].map(uid =>
    ctx.telegram.sendMessage(uid, text, { parse_mode: "MarkdownV2" })
  );

  const results = await Promise.allSettled(promises);
  const ok = results.filter(r => r.status === "fulfilled").length;
  const fail = results.length - ok;

  await ctx.reply(`‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${ok} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–µ —É–¥–∞–ª–æ—Å—å ${fail}.`);
});

/* ---------------------- –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–≤–æ–¥ ----------------------- */
bot.on("text", async ctx => {
  await ctx.reply(
    "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
    { reply_markup: mainMenuKeyboard(ctx.from.id === ADMIN_ID) }
  );
});

/* ------------------------------------------------------------------
   Vercel‚Äëhandler (webhook entry‚Äëpoint)
   ------------------------------------------------------------------ */
export default async function handler(req, res) {
  if (req.method === "POST") {
    try {
      // ------------ –í–ê–ñ–ù–û! -------------- 
      // –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º `res` –≤ handleUpdate ‚Äì –∏–Ω–∞—á–µ Vercel —É–∂–µ
      // –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç –∏ Telegram ‚Äú—Ç–µ—Ä—è–µ—Ç—Å—è‚Äù.
      await bot.handleUpdate(req.body);
      // –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ Telegraf –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º 200
      res.status(200).send("ok");
    } catch (e) {
      console.error("‚ùó Bot error:", e);
      res.status(500).send("internal error");
    }
  } else {
    // GET ‚Äì –ø—Ä–æ—Å—Ç–æ–π health‚Äëcheck
    res.status(200).send("Telegram bot is alive üëã");
  }
}
