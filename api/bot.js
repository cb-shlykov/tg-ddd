// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//  api/bot.js ‚Äì Telegram‚Äë–±–æ—Ç, Vercel Serverless Function (Node‚ÄØ18)
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import { Telegraf } from "telegraf";
import getRawBody from "raw-body";

/* ------------------------------------------------------------------
   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äì —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∂—ë—Å—Ç–∫–æ –≤–ø–∏—Å–∞–Ω—ã, –Ω–æ –≤ –ø—Ä–æ–¥–µ
   –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è).
   ------------------------------------------------------------------ */
const BOT_TOKEN = "7964054515:AAHIU9aDGoFQkfDaplTkbVQ9_JlilcrBzYM";
const ADMIN_ID  = 111603368;                // –≤–∞—à telegram‚Äëuser_id

if (!BOT_TOKEN) throw new Error("BOT_TOKEN is missing");
const bot = new Telegraf(BOT_TOKEN);

/* ------------------------------------------------------------------
   –î–∞–Ω–Ω—ã–µ (–¥–µ–º–æ‚Äë–º–∞—Å–∏–≤—ã schedule –∏ dayInfo)
   ------------------------------------------------------------------ */
const schedule = [
  {
    time: "08:00-08:40",
    Monday:    "–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º",
    Tuesday:   "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    Wednesday: "–§–∏–∑-—Ä–∞",
    Thursday:  "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Friday:    "–û–∫—Ä—É–∂. –º–∏—Ä",
    Saturday:  "–û–∫—Ä—É–∂. –º–∏—Ä"
  },
  {
    time: "08:50-09:30",
    Monday:    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    Tuesday:   "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Wednesday: "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    Thursday:  "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    Friday:    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    Saturday:  "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
  },
  {
    time: "09:45-10:25",
    Monday:    "–ú—É–∑—ã–∫–∞",
    Tuesday:   "–†–∏—Ç–º–∏–∫–∞",
    Wednesday: "–û–∫—Ä—É–∂. –º–∏—Ä",
    Thursday:  "–†–∏—Ç–º–∏–∫–∞",
    Friday:    "–§–∏–∑-—Ä–∞",
    Saturday:  "–§–∏–∑-—Ä–∞"
  },
  {
    time: "10:45-11:25",
    Monday:    "–†–∏—Ç–º–∏–∫–∞",
    Tuesday:   "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    Wednesday: "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Thursday:  "–¢—Ä—É–¥",
    Friday:    null,
    Saturday:  null
  },
  {
    time: "11:45-12:25",
    Monday:    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    Tuesday:   null,
    Wednesday: null,
    Thursday:  null,
    Friday:    null,
    Saturday:  null
  }
];

const dayInfo = [
  { day: "–ü–Ω", endOfLessons: "11:40", pickup: "–ë–∞–±—É—à–∫–∞", karate: false },
  { day: "–í—Ç", endOfLessons: "11:40", pickup: "–ë–∞–±—É—à–∫–∞", karate: "16:30" },
  { day: "–°—Ä", endOfLessons: "11:40", pickup: "–ü—Ä–æ–¥–ª–µ–Ω–∫–∞", karate: false },
  { day: "–ß—Ç", endOfLessons: "11:40", pickup: "–ë–∞–±—É—à–∫–∞", karate: "16:30" },
  { day: "–ü—Ç", endOfLessons: "11:40", pickup: "–ü—Ä–æ–¥–ª–µ–Ω–∫–∞", karate: false }
];

/* ------------------------------------------------------------------
   –ú–∞–ø–ø–∏–Ω–≥ –¥–Ω–µ–π
   ------------------------------------------------------------------ */
const EN_RU_DAYS = {
  Monday:    "–ü–Ω",
  Tuesday:   "–í—Ç",
  Wednesday: "–°—Ä",
  Thursday:  "–ß—Ç",
  Friday:    "–ü—Ç",
  Saturday:  "–°–±"
};

const RU_EN_DAYS = {
  –ü–Ω: "Monday",
  –í—Ç: "Tuesday",
  –°—Ä: "Wednesday",
  –ß—Ç: "Thursday",
  –ü—Ç: "Friday",
  –°–±: "Saturday"
};

/* ------------------------------------------------------------------
   –•—Ä–∞–Ω–∏–ª–∏—â–µ ID –≤—Å–µ—Ö, –∫—Ç–æ –∫–æ–≥–¥–∞‚Äë–ª–∏–±–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)
   ------------------------------------------------------------------ */
let knownUsers = new Set();

/* ------------------------------------------------------------------
   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
   ------------------------------------------------------------------ */
function formatDaySchedule(ruDay) {
  const enDay = RU_EN_DAYS[ruDay];
  if (!enDay) return `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å ¬´${ruDay}¬ª.`;

  const rows = schedule
    .filter(r => r[enDay])
    .map(r => `${r.time} ‚Äî ${r[enDay]}`);

  return rows.length
    ? `üìÖ *${ruDay}*:\n` + rows.join("\n")
    : `üìÖ *${ruDay}* ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.`;
}

function formatWeekSchedule() {
  const days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç"];
  return days.map(formatDaySchedule).join("\n\n");
}

function formatPickupInfo(ruDay) {
  const info = dayInfo.find(i => i.day === ruDay);
  if (!info) return `‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–Ω—è ${ruDay}.`;

  const karate = info.karate === false ? "‚ùå –Ω–µ—Ç" : `üïí ${info.karate}`;
  return (
    `üìå *${ruDay}*:\n` +
    `‚è∞ –ö–æ–Ω–µ—Ü —É—Ä–æ–∫–æ–≤: ${info.endOfLessons}\n` +
    `üë§ –ö—Ç–æ –∑–∞–±–µ—Ä—ë—Ç: ${info.pickup}\n` +
    `ü•ã –ö–∞—Ä–∞—Ç–µ: ${karate}`
  );
}

function formatWeekPickup() {
  return dayInfo.map(i => formatPickupInfo(i.day)).join("\n\n");
}

/* ------------------------------------------------------------------
   –ò–Ω–ª–∞–π–Ω‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   ------------------------------------------------------------------ */
function mainMenuKeyboard(isAdmin) {
  const btns = [
    [{ text: "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",   callback_data: "schedule_week" }],
    [{ text: "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å",     callback_data: "schedule_day" }],
    [{ text: "üóìÔ∏è –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é",      callback_data: "pickup_week" }],
    [{ text: "üóìÔ∏è –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –¥–µ–Ω—å",        callback_data: "pickup_day" }]
  ];
  if (isAdmin) {
    btns.push([{ text: "üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", callback_data: "admin_notify" }]);
  }
  return { inline_keyboard: btns };
}

/* –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è (–ø—Ä–µ—Ñ–∏–∫—Å = "schedule" | "pickup") */
function daysKeyboard(prefix) {
  const dayBtns = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç"].map(d => ({
    text: d,
    callback_data: `${prefix}_${d}`
  }));
  return {
    inline_keyboard: [
      dayBtns.slice(0, 3),
      dayBtns.slice(3, 5).concat([{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }])
    ]
  };
}

/* ------------------------------------------------------------------
   –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—É–¥–æ–±–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   ------------------------------------------------------------------ */
bot.use((ctx, next) => {
  console.log("üü¢ Update type:", ctx.updateType);
  console.log("üîé Payload:", JSON.stringify(ctx.update, null, 2));
  return next();
});

/* ------------------------------------------------------------------
   –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ‚Äì –≤—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥, –Ω–æ –ù–ï –±—Ä–æ—Å–∞–µ–º –¥–∞–ª—å—à–µ
   ------------------------------------------------------------------ */
bot.catch((err, ctx) => {
  console.error("‚ùó Unhandled bot error:", err);
  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback‚Äëquery, Telegram
  // —É–∂–µ –º–æ–∂–µ—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º ‚Äì –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—ë.
});

/* ------------------------------------------------------------------
   /start ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   ------------------------------------------------------------------ */
bot.start(ctx => {
  knownUsers.add(ctx.from.id);
  ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!\n` +
    `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.`,
    { reply_markup: mainMenuKeyboard(ctx.from.id === ADMIN_ID) }
  );
});

/* ------------------------------------------------------------------
   –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ¬´–±—ã—Å—Ç—Ä–æ¬ª –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback‚Äëquery,
   –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ ¬´query is too old¬ª).
   ------------------------------------------------------------------ */
async function safeAnswerCbQuery(ctx, text) {
  try {
    await ctx.answerCbQuery(text);
  } catch (e) {
    // –û—à–∏–±–∫–∞ 400 ¬´query is too old¬ª ‚Äì –ø—Ä–æ—Å—Ç–æ –≥–ª—É—à–∏–º, –±–æ—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ
    // –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ —É–≤–∏–¥–∏—Ç.
    console.warn("‚ö†Ô∏è answerCbQuery failed:", e.description || e.message);
  }
}

/* ------------------------------------------------------------------
   –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äì –¥–µ–π—Å—Ç–≤–∏—è
   ------------------------------------------------------------------ */
bot.action("schedule_week", async ctx => {
  // —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º, –±–µ–∑ await ‚Äì —Ç–∞–∫ —É–∫–ª–∞–¥—ã–≤–∞–µ–º—Å—è –≤ 3‚ÄØ—Å–µ–∫.
  safeAnswerCbQuery(ctx);
  await ctx.replyWithMarkdownV2(formatWeekSchedule(), {
    reply_markup: { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }]] }
  });
});

bot.action("schedule_day", async ctx => {
  safeAnswerCbQuery(ctx);
  await ctx.reply("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", {
    reply_markup: daysKeyboard("schedule")
  });
});

bot.action("pickup_week", async ctx => {
  safeAnswerCbQuery(ctx);
  await ctx.replyWithMarkdownV2(formatWeekPickup(), {
    reply_markup: { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }]] }
  });
});

bot.action("pickup_day", async ctx => {
  safeAnswerCbQuery(ctx);
  await ctx.reply("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", {
    reply_markup: daysKeyboard("pickup")
  });
});

/* ------------------------------------------------------------------
   –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–Ω—è (schedule_XX / pickup_XX)
   ------------------------------------------------------------------ */
bot.action(/^schedule_(\p{L}{2})$/u, async ctx => {
  const ruDay = ctx.match[1];
  safeAnswerCbQuery(ctx);
  await ctx.replyWithMarkdownV2(formatDaySchedule(ruDay), {
    reply_markup: { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }]] }
  });
});

bot.action(/^pickup_(\p{L}{2})$/u, async ctx => {
  const ruDay = ctx.match[1];
  safeAnswerCbQuery(ctx);
  await ctx.replyWithMarkdownV2(formatPickupInfo(ruDay), {
    reply_markup: { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_main" }]] }
  });
});

/* ------------------------------------------------------------------
   –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   ------------------------------------------------------------------ */
bot.action("back_main", async ctx => {
  safeAnswerCbQuery(ctx);
  await ctx.editMessageText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
    reply_markup: mainMenuKeyboard(ctx.from.id === ADMIN_ID)
  });
});

/* ------------------------------------------------------------------
   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
   ------------------------------------------------------------------ */
bot.action("admin_notify", async ctx => {
  if (ctx.from.id !== ADMIN_ID) {
    await ctx.answerCbQuery("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", { show_alert: true });
    return;
  }

  safeAnswerCbQuery(ctx);

  const text = "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ.";
  const promises = [...knownUsers].map(uid =>
    ctx.telegram.sendMessage(uid, text, { parse_mode: "MarkdownV2" })
  );

  const results = await Promise.allSettled(promises);
  const ok = results.filter(r => r.status === "fulfilled").length;
  const fail = results.length - ok;

  await ctx.reply(`‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${ok} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–µ —É–¥–∞–ª–æ—Å—å ${fail}.`);
});

/* ------------------------------------------------------------------
   –õ—é–±–æ–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (fallback)
   ------------------------------------------------------------------ */
bot.on("text", async ctx => {
  safeAnswerCbQuery(ctx);
  await ctx.reply(
    "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
    { reply_markup: mainMenuKeyboard(ctx.from.id === ADMIN_ID) }
  );
});

/* ------------------------------------------------------------------
   VERCEL‚Äëhandler (webhook entry‚Äëpoint)
   ------------------------------------------------------------------ */
export default async function handler(req, res) {
  // –¢–µ–ª–µ–≥—Ä–∞–º –ø–æ—Å—ã–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ POST‚Äë–∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== "POST") {
    return res.status(200).send("Telegram bot is alive üëã");
  }

  try {
    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º ¬´—Å—ã—Ä–æ–π¬ª –±—É—Ñ–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞)
    const raw = await getRawBody(req, {
      length: req.headers["content-length"],
      limit: "1mb",
      encoding: true // –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É JSON
    });

    // 2Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç Update
    const update = JSON.parse(raw);

    // 3Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ Telegraf‚Äë–æ–º
    await bot.handleUpdate(update);

    // 4Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200‚ÄØOK (–∏–Ω–∞—á–µ Telegram –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å)
    res.status(200).send("ok");
  } catch (err) {
    console.error("‚ùó Bot error (handler):", err);
    // –í—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º 200, –∏–Ω–∞—á–µ Telegram –±—É–¥–µ—Ç –¥–æ–ª–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã.
    res.status(200).send("ok");
  }
}

/* --------------------------------------------------------------
   –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π body‚Äëparser Vercel ‚Äì –æ–Ω –ª–æ–º–∞–µ—Ç
   raw‚Äëbody, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω Telegraf.
   -------------------------------------------------------------- */
export const config = {
  api: {
    bodyParser: false
  }
};
